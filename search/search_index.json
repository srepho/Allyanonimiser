{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Allyanonimiser","text":"<p>Australian-focused PII detection and anonymization for the insurance industry with support for stream processing of very large files.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Allyanonimiser is a specialized library for detecting and anonymizing personally identifiable information (PII) in text data, with a focus on Australian formats and insurance industry-specific content.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Australian-Focused PII Detection: Specialized patterns for TFNs, Medicare numbers, vehicle registrations, addresses, and more</li> <li>Insurance Industry Specialization: Detect policy numbers, claim references, and other industry-specific identifiers</li> <li>Multiple Entity Types: Comprehensive detection of general and specialized PII</li> <li>Flexible Anonymization: Multiple anonymization operators (replace, mask, redact, hash, and more)</li> <li>Stream Processing: Memory-efficient processing of large files with chunking support</li> <li>Reporting System: Comprehensive tracking and visualization of anonymization activities</li> <li>Jupyter Integration: Rich visualization capabilities in notebook environments</li> <li>DataFrame Support: Process pandas DataFrames with batch processing and multi-processing support</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create the Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Analyze text\nresults = ally.analyze(\n    text=\"Customer John Smith (TFN: 123 456 789) reported an incident on 15/06/2023 in Sydney NSW 2000.\"\n)\n\n# Print detected entities\nfor result in results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n\n# Anonymize text\nanonymized = ally.anonymize(\n    text=\"Customer John Smith (TFN: 123 456 789) reported an incident on 15/06/2023 in Sydney NSW 2000.\",\n    operators={\n        \"PERSON\": \"replace\",       # Replace with &lt;PERSON&gt;\n        \"AU_TFN\": \"mask\",          # Partially mask the TFN\n        \"DATE\": \"redact\",          # Replace date with [REDACTED]\n        \"AU_ADDRESS\": \"replace\"    # Replace with &lt;AU_ADDRESS&gt;\n    }\n)\n\nprint(anonymized[\"text\"])\n# Output: \"Customer &lt;PERSON&gt; (TFN: ***-***-***) reported an incident on [REDACTED] in &lt;AU_ADDRESS&gt;.\"\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the Installation guide to get started with Allyanonimiser. Then, follow the Quick Start guide to learn the basics of using the library.</p>"},{"location":"#use-cases","title":"Use Cases","text":"<p>Allyanonimiser is particularly useful for:</p> <ul> <li>Insurance claim processing and data analysis</li> <li>Medical report anonymization</li> <li>Customer service data management</li> <li>Regulatory compliance with Australian privacy laws</li> <li>Processing large datasets containing sensitive information</li> <li>Creating anonymized training data for machine learning models</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"NEXT_STEPS/","title":"Next Steps for Allyanonimiser Documentation","text":""},{"location":"NEXT_STEPS/#current-status","title":"Current Status","text":"<p>We've set up a basic MkDocs documentation structure with:</p> <ol> <li>A comprehensive configuration in <code>mkdocs.yml</code></li> <li>Basic structure of documentation pages in <code>docs/</code> directory</li> <li>Custom styling in <code>docs/css/extra.css</code></li> <li>Key documentation pages:</li> <li>Home page</li> <li>Installation guide</li> <li>Quick start guide</li> <li>Pattern reference overview</li> <li>Australian patterns reference</li> <li>Anonymization operators</li> <li>Custom operators</li> <li>Text analysis guide</li> <li>API reference</li> </ol>"},{"location":"NEXT_STEPS/#next-steps","title":"Next Steps","text":"<p>To complete the documentation, consider the following next steps:</p>"},{"location":"NEXT_STEPS/#content-creation","title":"Content Creation","text":"<ol> <li>Complete remaining documentation pages:</li> <li>General patterns</li> <li>Insurance patterns</li> <li>Creating custom patterns</li> <li>Anonymizing text</li> <li>Working with DataFrames</li> <li>Pattern generalization</li> <li>Stream processing</li> <li>Reporting system</li> <li>Analyzer API</li> <li>Anonymizer API</li> <li>Pattern manager API</li> <li> <p>Utilities API</p> </li> <li> <p>Add examples:</p> </li> <li>Basic examples</li> <li>Pattern creation examples</li> <li>Custom anonymization examples</li> <li> <p>Jupyter integration examples</p> </li> <li> <p>Enhance API documentation:</p> </li> <li>Add more detailed API documentation using mkdocstrings</li> <li>Include code examples for all API methods</li> <li>Document return types and exceptions</li> </ol>"},{"location":"NEXT_STEPS/#visuals-and-media","title":"Visuals and Media","text":"<ol> <li>Create logo and favicon:</li> <li>Design a logo for Allyanonimiser</li> <li>Create a favicon for the documentation site</li> <li> <p>Add them to <code>docs/assets/</code></p> </li> <li> <p>Add diagrams and screenshots:</p> </li> <li>Architecture diagrams</li> <li>Workflow diagrams</li> <li>Screenshots of example outputs</li> <li>Visualization of anonymization process</li> </ol>"},{"location":"NEXT_STEPS/#testing-and-quality","title":"Testing and Quality","text":"<ol> <li>Review and proofread:</li> <li>Check all documentation for accuracy</li> <li>Proofread for grammar and spelling errors</li> <li> <p>Ensure consistent terminology throughout</p> </li> <li> <p>Test code examples:</p> </li> <li>Verify that all code examples work as expected</li> <li>Add automated testing for documentation examples</li> </ol>"},{"location":"NEXT_STEPS/#deployment","title":"Deployment","text":"<ol> <li>Deploy to GitHub Pages:</li> <li>Run <code>mkdocs gh-deploy</code> to deploy to GitHub Pages</li> <li> <p>Add link to documentation in main README</p> </li> <li> <p>Set up continuous integration:</p> </li> <li>Add GitHub Action to build and deploy documentation on changes</li> <li>Implement automated checks for documentation quality</li> </ol>"},{"location":"NEXT_STEPS/#additional-enhancements","title":"Additional Enhancements","text":"<ol> <li>Add search functionality:</li> <li>Enhance the built-in search with better indexing</li> <li> <p>Add search customization</p> </li> <li> <p>Add version selector:</p> </li> <li>Set up versioning for documentation</li> <li> <p>Allow users to switch between documentation versions</p> </li> <li> <p>Add interactive examples:</p> </li> <li>Create interactive examples using JavaScript</li> <li>Add a live demo if possible</li> </ol>"},{"location":"NEXT_STEPS/#how-to-use-this-document","title":"How to Use This Document","text":"<p>Use this document as a roadmap for completing the documentation. As you complete items, check them off to track progress. Feel free to add or modify items as needed.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-210","title":"Version 2.1.0","text":"<ul> <li>Added support for NSW legacy driver's license pattern</li> <li>Improved pattern recognition for Australian TFNs</li> <li>Enhanced handling of date formats </li> <li>Fixed issues with BSB recognition</li> <li>Added more comprehensive test suite for Australian patterns</li> <li>Performance improvements for large file processing</li> </ul>"},{"location":"changelog/#version-200","title":"Version 2.0.0","text":"<ul> <li>Added comprehensive reporting system</li> <li>Added support for batch processing with DataFrames</li> <li>Improved detection accuracy for person names</li> <li>Enhanced anonymization operators</li> <li>Added custom operator support</li> <li>Added pattern generalization levels</li> <li>Performance improvements for all operations</li> <li>Added Jupyter notebook integration</li> <li>Added extensive documentation</li> </ul>"},{"location":"changelog/#version-150","title":"Version 1.5.0","text":"<ul> <li>Added support for pattern generation from examples</li> <li>Improved context-based pattern detection</li> <li>Added insurance-specific pattern detection</li> <li>Enhanced support for custom patterns</li> <li>Fixed various bugs with regex patterns</li> </ul>"},{"location":"changelog/#version-100","title":"Version 1.0.0","text":"<ul> <li>Initial release</li> <li>Basic PII detection for Australian formats</li> <li>Simple anonymization capabilities</li> <li>Support for custom patterns</li> <li>Integration with spaCy for NER</li> </ul>"},{"location":"advanced/anonymization-operators/","title":"Anonymization Operators","text":"<p>Allyanonimiser provides several anonymization operators that control how detected entities are transformed in the text. Each operator offers different levels of privacy protection and information preservation.</p>"},{"location":"advanced/anonymization-operators/#available-operators","title":"Available Operators","text":"Operator Description Example Result <code>replace</code> Replace with entity type \"John Smith\" <code>&lt;PERSON&gt;</code> <code>redact</code> Fully redact the entity \"john.smith@example.com\" <code>[REDACTED]</code> <code>mask</code> Partially mask while preserving structure \"john.smith@example.com\" <code>j***.s****@e******.com</code> <code>hash</code> Replace with consistent hash \"John Smith\" <code>7f9d6a...</code> (same for all \"John Smith\") <code>encrypt</code> Encrypt with a key (recoverable) \"John Smith\" <code>AES256:a7f9c...</code> <code>age_bracket</code> Convert dates to age brackets \"DOB: 15/03/1980\" <code>DOB: 40-44</code> <code>custom</code> User-defined function (depends on function) (custom output)"},{"location":"advanced/anonymization-operators/#basic-usage","title":"Basic Usage","text":"<pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create an instance\nally = create_allyanonimiser()\n\n# Anonymize text with different operators for different entity types\nresult = ally.anonymize(\n    text=\"Customer John Smith (email: john.smith@example.com) called about policy POL-123456.\",\n    operators={\n        \"PERSON\": \"replace\",           # Replace with &lt;PERSON&gt;\n        \"EMAIL_ADDRESS\": \"mask\",       # Partially mask the email\n        \"INSURANCE_POLICY_NUMBER\": \"redact\"  # Fully redact the policy number\n    }\n)\n\nprint(result[\"text\"])\n# Output: \"Customer &lt;PERSON&gt; (email: j***.s****@e******.com) called about policy [REDACTED].\"\n</code></pre>"},{"location":"advanced/anonymization-operators/#detailed-operator-descriptions","title":"Detailed Operator Descriptions","text":""},{"location":"advanced/anonymization-operators/#replace-operator","title":"Replace Operator","text":"<p>The <code>replace</code> operator substitutes the detected entity with its entity type enclosed in angle brackets.</p> <pre><code>result = ally.anonymize(\n    text=\"John Smith lives in Sydney.\",\n    operators={\"PERSON\": \"replace\", \"LOCATION\": \"replace\"}\n)\n# Output: \"&lt;PERSON&gt; lives in &lt;LOCATION&gt;.\"\n</code></pre> <p>This operator preserves the semantics of the text while removing all identifying information.</p>"},{"location":"advanced/anonymization-operators/#redact-operator","title":"Redact Operator","text":"<p>The <code>redact</code> operator completely removes the entity and replaces it with <code>[REDACTED]</code>.</p> <pre><code>result = ally.anonymize(\n    text=\"The credit card number is 1234 5678 9012 3456.\",\n    operators={\"CREDIT_CARD\": \"redact\"}\n)\n# Output: \"The credit card number is [REDACTED].\"\n</code></pre> <p>This provides the highest level of privacy by removing all traces of the sensitive information.</p>"},{"location":"advanced/anonymization-operators/#mask-operator","title":"Mask Operator","text":"<p>The <code>mask</code> operator preserves the structure and partial content of the entity while obscuring most of the information.</p> <pre><code>result = ally.anonymize(\n    text=\"Contact john.smith@example.com for more details.\",\n    operators={\"EMAIL_ADDRESS\": \"mask\"}\n)\n# Output: \"Contact j***.s****@e******.com for more details.\"\n</code></pre> <p>By default, it: - Preserves the first character of each segment - Masks the rest with asterisks - Keeps special characters (like @ and . in emails)</p>"},{"location":"advanced/anonymization-operators/#hash-operator","title":"Hash Operator","text":"<p>The <code>hash</code> operator replaces the entity with a consistent hash value, ensuring that the same entity always gets the same replacement.</p> <pre><code>result = ally.anonymize(\n    text=\"John Smith and again John Smith both called today.\",\n    operators={\"PERSON\": \"hash\"}\n)\n# Both instances of \"John Smith\" will be replaced with the same hash value\n</code></pre> <p>This is useful for maintaining relationships in the data without revealing identities.</p>"},{"location":"advanced/anonymization-operators/#encrypt-operator","title":"Encrypt Operator","text":"<p>The <code>encrypt</code> operator uses AES-256 encryption to replace the entity, allowing recovery with the right key.</p> <pre><code>result = ally.anonymize(\n    text=\"TFN: 123 456 789\",\n    operators={\"AU_TFN\": \"encrypt\"},\n    encryption_key=\"my-secret-key\"  # Optional: provide your own key\n)\n# Output: \"TFN: AES256:a7f9c...\"\n</code></pre> <p>To decrypt:</p> <pre><code>from allyanonimiser.utils.cipher import decrypt_text\n\noriginal = decrypt_text(result[\"entity_replacements\"][0][\"replacement\"], \"my-secret-key\")\nprint(original)  # \"123 456 789\"\n</code></pre>"},{"location":"advanced/anonymization-operators/#age-bracket-operator","title":"Age Bracket Operator","text":"<p>The <code>age_bracket</code> operator converts dates (especially dates of birth) to age brackets.</p> <pre><code>result = ally.anonymize(\n    text=\"Patient DOB: 15/03/1980\",\n    operators={\"DATE_OF_BIRTH\": \"age_bracket\"},\n    age_bracket_size=5  # Optional: specify the bracket size (default is 5)\n)\n# Output: \"Patient DOB: 40-44\" (assuming current year is 2023)\n</code></pre> <p>This preserves the approximate age while hiding the exact birth date.</p>"},{"location":"advanced/anonymization-operators/#configuration-options","title":"Configuration Options","text":"<p>You can configure the anonymization process with additional parameters:</p> <pre><code>from allyanonimiser import create_allyanonimiser, AnonymizationConfig\n\nally = create_allyanonimiser()\n\n# Create a configuration object\nconfig = AnonymizationConfig(\n    operators={\n        \"PERSON\": \"replace\",\n        \"EMAIL_ADDRESS\": \"mask\",\n        \"DATE_OF_BIRTH\": \"age_bracket\"\n    },\n    age_bracket_size=10,              # Size of age brackets\n    mask_char=\"*\",                    # Character to use for masking\n    redaction_text=\"[HIDDEN]\",        # Text to use for redaction\n    hash_algorithm=\"sha256\",          # Hashing algorithm to use\n    hash_length=8,                    # Length of hash output\n    encryption_key=\"my-secret-key\"    # Key for encryption\n)\n\n# Use the configuration\nresult = ally.anonymize(\n    text=\"John Smith (DOB: 15/03/1980) email: john.smith@example.com\",\n    config=config\n)\n</code></pre>"},{"location":"advanced/anonymization-operators/#see-also","title":"See Also","text":"<ul> <li>Custom Operators - Learn how to create your own anonymization operators</li> <li>Analyzing Text - Understanding the analysis capabilities</li> <li>Basic Usage - General usage patterns</li> </ul>"},{"location":"advanced/custom-operators/","title":"Custom Anonymization Operators","text":"<p>While Allyanonimiser provides several built-in anonymization operators, you can also create custom operators to meet specific requirements. Custom operators give you complete control over how detected entities are transformed.</p>"},{"location":"advanced/custom-operators/#creating-a-custom-operator","title":"Creating a Custom Operator","text":"<p>A custom operator is a function that takes two parameters: 1. <code>entity_text</code> - The text of the detected entity 2. <code>entity_type</code> - The type of the detected entity (e.g., \"PERSON\", \"EMAIL_ADDRESS\")</p> <p>The function should return the transformed text that will replace the original entity.</p>"},{"location":"advanced/custom-operators/#basic-example","title":"Basic Example","text":"<pre><code>from allyanonimiser import create_allyanonimiser\n\n# Define a simple custom operator\ndef reverse_text(entity_text, entity_type):\n    \"\"\"Reverse the text of the entity.\"\"\"\n    return entity_text[::-1]\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Use the custom operator\nresult = ally.anonymize(\n    text=\"Customer John Smith sent an email about their policy.\",\n    operators={\n        \"PERSON\": reverse_text  # Pass the function directly\n    }\n)\n\nprint(result[\"text\"])\n# Output: \"Customer htimS nhoJ sent an email about their policy.\"\n</code></pre>"},{"location":"advanced/custom-operators/#advanced-custom-operator-examples","title":"Advanced Custom Operator Examples","text":""},{"location":"advanced/custom-operators/#randomized-name-replacement","title":"Randomized Name Replacement","text":"<p>This example replaces detected person names with random names from a predefined list, while maintaining consistency:</p> <pre><code>from allyanonimiser import create_allyanonimiser\nimport hashlib\n\ndef randomize_names(entity_text, entity_type):\n    \"\"\"Replace person names with random names from a predefined list.\"\"\"\n    if entity_type != \"PERSON\":\n        return entity_text\n\n    # Simple list of random replacement names\n    replacements = [\"Alex Taylor\", \"Sam Johnson\", \"Jordan Lee\", \"Casey Brown\", \n                   \"Morgan Smith\", \"Jamie Williams\", \"Riley Garcia\", \"Taylor Wilson\"]\n\n    # Use hash of original name to consistently select the same replacement\n    hash_val = int(hashlib.md5(entity_text.encode()).hexdigest(), 16)\n    index = hash_val % len(replacements)\n\n    return replacements[index]\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Use the custom operator\nresult = ally.anonymize(\n    text=\"Customer John Smith contacted Mary Johnson about their policy.\",\n    operators={\n        \"PERSON\": randomize_names\n    }\n)\n\nprint(result[\"text\"])\n# Output might be: \"Customer Alex Taylor contacted Sam Johnson about their policy.\"\n</code></pre>"},{"location":"advanced/custom-operators/#format-preserving-encryption","title":"Format-Preserving Encryption","text":"<p>This operator preserves the format of credit card numbers while anonymizing them:</p> <pre><code>from allyanonimiser import create_allyanonimiser\nimport hashlib\n\ndef format_preserving_cc(entity_text, entity_type):\n    \"\"\"\n    Replace credit card numbers with fake ones that pass Luhn check\n    but preserve the format and issuer prefix.\n    \"\"\"\n    if entity_type != \"CREDIT_CARD\":\n        return entity_text\n\n    # Remove all non-digits\n    digits = ''.join(c for c in entity_text if c.isdigit())\n\n    # Preserve the first 6 digits (issuer identification)\n    prefix = digits[:6]\n\n    # Generate replacement digits for the rest\n    hash_obj = hashlib.md5((digits + \"salt\").encode())\n    hash_hex = hash_obj.hexdigest()\n\n    # Convert hex hash to decimal digits\n    hash_dec = ''.join(str(int(c, 16) % 10) for c in hash_hex)\n\n    # Create new number with preserved prefix\n    new_digits = prefix + hash_dec[:(len(digits) - 6 - 1)]\n\n    # Generate a valid Luhn check digit\n    check_digit = generate_luhn_digit(new_digits)\n    new_digits += str(check_digit)\n\n    # Reapply the original formatting\n    result = ''\n    digit_index = 0\n    for char in entity_text:\n        if char.isdigit() and digit_index &lt; len(new_digits):\n            result += new_digits[digit_index]\n            digit_index += 1\n        else:\n            result += char\n\n    return result\n\n# Helper function for Luhn algorithm\ndef generate_luhn_digit(partial_number):\n    \"\"\"Generate the last digit for a number to make it pass the Luhn check.\"\"\"\n    digits = [int(d) for d in partial_number]\n\n    # Double every second digit from right to left\n    for i in range(len(digits) - 1, -1, -2):\n        digits[i] *= 2\n        if digits[i] &gt; 9:\n            digits[i] -= 9\n\n    # Calculate check digit\n    total = sum(digits)\n    return (10 - (total % 10)) % 10\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Use the custom operator\nresult = ally.anonymize(\n    text=\"Payment made with card 4111-2222-3333-4444 expiring 12/25\",\n    operators={\n        \"CREDIT_CARD\": format_preserving_cc\n    }\n)\n\nprint(result[\"text\"])\n# Output preserves format: \"Payment made with card 4111-XXXX-XXXX-XXXX expiring 12/25\"\n</code></pre>"},{"location":"advanced/custom-operators/#differential-privacy-operator","title":"Differential Privacy Operator","text":"<p>This example adds noise to numerical values to implement differential privacy:</p> <pre><code>from allyanonimiser import create_allyanonimiser\nimport re\nimport random\n\ndef differential_privacy_number(entity_text, entity_type):\n    \"\"\"\n    Apply differential privacy to numerical values by adding\n    Laplace noise proportional to the value.\n    \"\"\"\n    if entity_type != \"MONETARY_VALUE\":\n        return entity_text\n\n    # Extract the numerical value\n    match = re.search(r'[\\d,.]+', entity_text)\n    if not match:\n        return entity_text\n\n    # Convert to float\n    try:\n        value_str = match.group(0).replace(',', '')\n        value = float(value_str)\n    except ValueError:\n        return entity_text\n\n    # Add Laplace noise with scale proportional to the value\n    epsilon = 0.1  # Privacy parameter (smaller = more privacy)\n    scale = max(1.0, abs(value) * 0.05) / epsilon\n    noise = random.normalvariate(0, scale)\n    new_value = value + noise\n\n    # Round to appropriate precision\n    decimals = len(value_str.split('.')[-1]) if '.' in value_str else 0\n    new_value = round(new_value, decimals)\n\n    # Format with commas for thousands\n    new_value_str = f\"{new_value:,.{decimals}f}\"\n\n    # Replace the value in the original string\n    return entity_text.replace(match.group(0), new_value_str)\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Use the custom operator\nresult = ally.anonymize(\n    text=\"The policy premium is $1,234.56 per year.\",\n    operators={\n        \"MONETARY_VALUE\": differential_privacy_number\n    }\n)\n\nprint(result[\"text\"])\n# Output might be: \"The policy premium is $1,246.32 per year.\"\n</code></pre>"},{"location":"advanced/custom-operators/#stateful-custom-operators","title":"Stateful Custom Operators","text":"<p>You can also create stateful operators by using closures or classes. This is useful when you need to maintain state across multiple anonymizations.</p>"},{"location":"advanced/custom-operators/#class-based-operator","title":"Class-Based Operator","text":"<pre><code>from allyanonimiser import create_allyanonimiser\n\nclass EntityCounter:\n    \"\"\"A custom operator that keeps count of entity types seen.\"\"\"\n\n    def __init__(self):\n        self.counts = {}\n\n    def __call__(self, entity_text, entity_type):\n        \"\"\"Make the class instance callable as a function.\"\"\"\n        # Update count for this entity type\n        self.counts[entity_type] = self.counts.get(entity_type, 0) + 1\n\n        # Return a replacement with the count\n        return f\"&lt;{entity_type}_{self.counts[entity_type]}&gt;\"\n\n    def get_stats(self):\n        \"\"\"Return the current statistics.\"\"\"\n        return self.counts\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Create the stateful operator\ncounter_op = EntityCounter()\n\n# Use the custom operator\nresult = ally.anonymize(\n    text=\"John Smith and Jane Doe both live in Sydney.\",\n    operators={\n        \"PERSON\": counter_op,\n        \"LOCATION\": counter_op\n    }\n)\n\nprint(result[\"text\"])\n# Output: \"&lt;PERSON_1&gt; and &lt;PERSON_2&gt; both live in &lt;LOCATION_1&gt;.\"\n\n# Get statistics from the operator\nprint(counter_op.get_stats())\n# Output: {'PERSON': 2, 'LOCATION': 1}\n</code></pre>"},{"location":"advanced/custom-operators/#integration-with-anonymizationconfig","title":"Integration with AnonymizationConfig","text":"<p>You can also use custom operators with the <code>AnonymizationConfig</code> object:</p> <pre><code>from allyanonimiser import create_allyanonimiser, AnonymizationConfig\n\n# Define a custom operator\ndef uppercase_operator(entity_text, entity_type):\n    return entity_text.upper()\n\n# Create a configuration with the custom operator\nconfig = AnonymizationConfig(\n    operators={\n        \"PERSON\": uppercase_operator,\n        \"EMAIL_ADDRESS\": \"mask\",\n        \"POLICY_NUMBER\": \"replace\"\n    }\n)\n\n# Create an Allyanonimiser instance\nally = create_allyanonimiser()\n\n# Use the configuration\nresult = ally.anonymize(\n    text=\"John Smith (john.smith@example.com) has policy POL-123456.\",\n    config=config\n)\n\nprint(result[\"text\"])\n# Output: \"JOHN SMITH (j***.s****@e******.com) has policy &lt;POLICY_NUMBER&gt;.\"\n</code></pre>"},{"location":"advanced/custom-operators/#see-also","title":"See Also","text":"<ul> <li>Anonymization Operators - Learn about built-in operators</li> <li>Pattern Generalization - Understanding pattern flexibility</li> <li>Stream Processing - Processing large volumes of data</li> </ul>"},{"location":"advanced/pattern-generalization/","title":"Pattern Generalization","text":"<p>Coming soon...</p>"},{"location":"advanced/reporting/","title":"Reporting System","text":"<p>Coming soon...</p>"},{"location":"advanced/stream-processing/","title":"Stream Processing","text":"<p>Coming soon...</p>"},{"location":"api/analyzer/","title":"Analyzer API","text":"<p>Coming soon...</p>"},{"location":"api/anonymizer/","title":"Anonymizer API","text":"<p>Coming soon...</p>"},{"location":"api/main/","title":"Main API Reference","text":"<p>This page documents the main API of the Allyanonimiser package.</p>"},{"location":"api/main/#main-classes-and-functions","title":"Main Classes and Functions","text":""},{"location":"api/main/#create_allyanonimiser","title":"<code>create_allyanonimiser</code>","text":"<pre><code>def create_allyanonimiser(pattern_filepath=None, settings_path=None):\n    \"\"\"\n    Create an Allyanonimiser instance with all patterns pre-configured.\n\n    Args:\n        pattern_filepath: Optional path to a JSON file with pattern definitions\n        settings_path: Optional path to a settings file (JSON or YAML)\n\n    Returns:\n        Allyanonimiser instance\n    \"\"\"\n</code></pre> <p>This is the primary factory function for creating an Allyanonimiser instance.</p> <p>Example: <pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create with default settings\nally = create_allyanonimiser()\n\n# Create with custom patterns\nally = create_allyanonimiser(pattern_filepath=\"my_patterns.json\")\n\n# Create with custom settings\nally = create_allyanonimiser(settings_path=\"my_settings.yaml\")\n</code></pre></p>"},{"location":"api/main/#allyanonimiser-class","title":"<code>Allyanonimiser</code> Class","text":"<p>The main class that provides a unified interface for PII detection and anonymization.</p> <pre><code>class Allyanonimiser:\n    \"\"\"\n    Main class for PII detection and anonymization with comprehensive configuration options.\n    \"\"\"\n</code></pre>"},{"location":"api/main/#key-methods","title":"Key Methods","text":""},{"location":"api/main/#analyze","title":"<code>analyze</code>","text":"<pre><code>def analyze(self, text, config=None):\n    \"\"\"\n    Analyze text to detect PII entities.\n\n    Args:\n        text (str): The text to analyze\n        config (AnalysisConfig, optional): Configuration for analysis\n\n    Returns:\n        List of detected entities\n    \"\"\"\n</code></pre>"},{"location":"api/main/#anonymize","title":"<code>anonymize</code>","text":"<pre><code>def anonymize(self, text, operators=None, config=None):\n    \"\"\"\n    Anonymize text by replacing detected PII entities.\n\n    Args:\n        text (str): The text to anonymize\n        operators (dict, optional): Mapping of entity types to operators\n        config (AnonymizationConfig, optional): Configuration for anonymization\n\n    Returns:\n        Dict containing anonymized text and metadata\n    \"\"\"\n</code></pre>"},{"location":"api/main/#process","title":"<code>process</code>","text":"<pre><code>def process(self, text, analysis_config=None, anonymization_config=None):\n    \"\"\"\n    Process text by analyzing and anonymizing in one step.\n\n    Args:\n        text (str): The text to process\n        analysis_config (AnalysisConfig, optional): Configuration for analysis\n        anonymization_config (AnonymizationConfig, optional): Configuration for anonymization\n\n    Returns:\n        Dict containing analysis results and anonymized text\n    \"\"\"\n</code></pre>"},{"location":"api/main/#add_pattern","title":"<code>add_pattern</code>","text":"<pre><code>def add_pattern(self, pattern_definition):\n    \"\"\"\n    Add a custom pattern to the analyzer.\n\n    Args:\n        pattern_definition (dict or CustomPatternDefinition): The pattern to add\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"api/main/#create_pattern_from_examples","title":"<code>create_pattern_from_examples</code>","text":"<pre><code>def create_pattern_from_examples(self, entity_type, examples, context=None, name=None, \n                                pattern_type=\"regex\", generalization_level=\"none\"):\n    \"\"\"\n    Create and add a pattern from example strings.\n\n    Args:\n        entity_type (str): Entity type this pattern detects\n        examples (List[str]): List of example strings to generate pattern from\n        context (List[str], optional): List of context words\n        name (str, optional): Name for the pattern\n        pattern_type (str, optional): Type of pattern to create - \"regex\" or \"spacy\"\n        generalization_level (str, optional): Level of pattern generalization\n\n    Returns:\n        CustomPatternDefinition: The created pattern definition\n    \"\"\"\n</code></pre>"},{"location":"api/main/#process_dataframe","title":"<code>process_dataframe</code>","text":"<pre><code>def process_dataframe(self, df, column, operation=\"anonymize\", output_column=None, \n                     operators=None, config=None, batch_size=100, num_workers=1):\n    \"\"\"\n    Process a pandas DataFrame by analyzing or anonymizing a text column.\n\n    Args:\n        df (pandas.DataFrame): DataFrame to process\n        column (str): Name of the column containing text\n        operation (str, optional): Operation to perform - \"analyze\" or \"anonymize\"\n        output_column (str, optional): Name of the output column\n        operators (dict, optional): Entity type to operator mapping\n        config (AnonymizationConfig, optional): Configuration for anonymization\n        batch_size (int, optional): Batch size for processing\n        num_workers (int, optional): Number of parallel workers\n\n    Returns:\n        pandas.DataFrame: Processed DataFrame\n    \"\"\"\n</code></pre>"},{"location":"api/main/#export_config","title":"<code>export_config</code>","text":"<pre><code>def export_config(self, filepath, format=\"json\"):\n    \"\"\"\n    Export current configuration to a file.\n\n    Args:\n        filepath (str): Path to save the configuration\n        format (str, optional): Format - \"json\" or \"yaml\"\n\n    Returns:\n        None\n    \"\"\"\n</code></pre>"},{"location":"api/main/#analysisconfig-class","title":"<code>AnalysisConfig</code> Class","text":"<p>Configuration object for the analysis process.</p> <pre><code>class AnalysisConfig:\n    \"\"\"\n    Configuration for the analysis process.\n    \"\"\"\n\n    def __init__(self, active_entity_types=None, min_score_threshold=0.5, context_words=None):\n        \"\"\"\n        Initialize configuration with optional parameters.\n\n        Args:\n            active_entity_types (List[str], optional): Entity types to detect\n            min_score_threshold (float, optional): Minimum confidence score\n            context_words (Dict[str, List[str]], optional): Additional context words\n        \"\"\"\n</code></pre>"},{"location":"api/main/#anonymizationconfig-class","title":"<code>AnonymizationConfig</code> Class","text":"<p>Configuration object for the anonymization process.</p> <pre><code>class AnonymizationConfig:\n    \"\"\"\n    Configuration for the anonymization process.\n    \"\"\"\n\n    def __init__(self, operators=None, age_bracket_size=5, mask_char=\"*\", \n                redaction_text=\"[REDACTED]\", hash_algorithm=\"sha256\", \n                hash_length=8, encryption_key=None):\n        \"\"\"\n        Initialize configuration with optional parameters.\n\n        Args:\n            operators (Dict[str, Union[str, callable]], optional): Entity type to operator mapping\n            age_bracket_size (int, optional): Size of age brackets\n            mask_char (str, optional): Character to use for masking\n            redaction_text (str, optional): Text to use for redaction\n            hash_algorithm (str, optional): Hashing algorithm to use\n            hash_length (int, optional): Length of hash output\n            encryption_key (str, optional): Key for encryption\n        \"\"\"\n</code></pre>"},{"location":"api/main/#pattern-related-classes","title":"Pattern Related Classes","text":""},{"location":"api/main/#custompatterndefinition-class","title":"<code>CustomPatternDefinition</code> Class","text":"<pre><code>class CustomPatternDefinition:\n    \"\"\"\n    Definition of a custom pattern for detecting entities.\n    \"\"\"\n\n    def __init__(self, entity_type, patterns, context=None, name=None, \n                 score=0.65, language=\"en\", description=None):\n        \"\"\"\n        Initialize a custom pattern definition.\n\n        Args:\n            entity_type (str): Entity type this pattern detects\n            patterns (List[str]): List of regex patterns or spaCy patterns\n            context (List[str], optional): List of context words\n            name (str, optional): Name for the pattern\n            score (float, optional): Confidence score threshold\n            language (str, optional): Language code\n            description (str, optional): Description of the pattern\n        \"\"\"\n</code></pre>"},{"location":"api/main/#patternmanager-class","title":"<code>PatternManager</code> Class","text":"<pre><code>class PatternManager:\n    \"\"\"\n    Manages pattern definitions and provides pattern registry functionality.\n    \"\"\"\n</code></pre>"},{"location":"api/main/#utility-functions","title":"Utility Functions","text":""},{"location":"api/main/#pattern-generation","title":"Pattern Generation","text":"<pre><code>def create_pattern_from_examples(entity_type, examples, context=None, name=None, \n                               pattern_type=\"regex\", generalization_level=\"none\"):\n    \"\"\"\n    Create a custom pattern definition from examples with optional generalization.\n\n    Args:\n        entity_type (str): Entity type this pattern detects\n        examples (List[str]): List of example strings to generate pattern from\n        context (List[str], optional): List of context words\n        name (str, optional): Name for the pattern\n        pattern_type (str, optional): Type of pattern to create - \"regex\" or \"spacy\"\n        generalization_level (str, optional): Level of pattern generalization\n\n    Returns:\n        CustomPatternDefinition: A pattern definition that can be added to an analyzer\n    \"\"\"\n</code></pre>"},{"location":"api/main/#pattern-validation","title":"Pattern Validation","text":"<pre><code>def test_pattern_against_examples(pattern, positive_examples, negative_examples=None):\n    \"\"\"\n    Test a regex pattern against example strings.\n\n    Args:\n        pattern (str): Regex pattern to test\n        positive_examples (List[str]): Examples that should match\n        negative_examples (List[str], optional): Examples that should not match\n\n    Returns:\n        Dict: Results of the test with is_valid flag and diagnostic message\n    \"\"\"\n</code></pre>"},{"location":"api/main/#see-also","title":"See Also","text":"<p>For more detailed API documentation on specific components:</p> <ul> <li>Analyzer API - Documentation for the EnhancedAnalyzer class</li> <li>Anonymizer API - Documentation for the EnhancedAnonymizer class</li> <li>Pattern Manager API - Documentation for pattern management classes</li> <li>Utilities API - Documentation for utility functions</li> </ul>"},{"location":"api/pattern-manager/","title":"Pattern Manager API","text":"<p>Coming soon...</p>"},{"location":"api/utilities/","title":"Utilities API","text":"<p>Coming soon...</p>"},{"location":"examples/basic/","title":"Basic Examples","text":"<p>Coming soon...</p>"},{"location":"examples/custom-anonymization/","title":"Custom Anonymization Examples","text":"<p>Coming soon...</p>"},{"location":"examples/jupyter/","title":"Jupyter Integration","text":"<p>Coming soon...</p>"},{"location":"examples/pattern-creation/","title":"Pattern Creation Examples","text":"<p>Coming soon...</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>Allyanonimiser can be installed using pip with various installation options depending on your needs.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>A spaCy language model (recommended)</li> </ul>"},{"location":"getting-started/installation/#basic-installation","title":"Basic Installation","text":"<p>Install the core package from PyPI:</p> <pre><code>pip install allyanonimiser==2.1.0\n</code></pre>"},{"location":"getting-started/installation/#installation-options","title":"Installation Options","text":"<p>Allyanonimiser offers several installation options to meet different needs:</p>"},{"location":"getting-started/installation/#with-stream-processing-support","title":"With Stream Processing Support","text":"<p>For processing very large files with memory-efficient streaming:</p> <pre><code>pip install \"allyanonimiser[stream]==2.1.0\"\n</code></pre>"},{"location":"getting-started/installation/#with-llm-integration","title":"With LLM Integration","text":"<p>For advanced pattern generation using language models:</p> <pre><code>pip install \"allyanonimiser[llm]==2.1.0\"\n</code></pre>"},{"location":"getting-started/installation/#complete-installation","title":"Complete Installation","text":"<p>To install all optional dependencies:</p> <pre><code>pip install \"allyanonimiser[stream,llm]==2.1.0\"\n</code></pre>"},{"location":"getting-started/installation/#installing-spacy-language-models","title":"Installing spaCy Language Models","text":"<p>For optimal performance, install a spaCy language model:</p> <pre><code># Install the comprehensive language model (recommended)\npython -m spacy download en_core_web_lg\n\n# OR install the smaller model if you have limited resources\npython -m spacy download en_core_web_sm\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>If you're contributing to the project, install in development mode:</p> <pre><code># Clone the repository\ngit clone https://github.com/srepho/Allyanonimiser.git\ncd Allyanonimiser\n\n# Install in development mode\npip install -e .\n\n# Install development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that Allyanonimiser was installed correctly, run:</p> <pre><code>import allyanonimiser\nprint(allyanonimiser.__version__)\n</code></pre> <p>This should print the current version of Allyanonimiser (e.g., <code>2.1.0</code>).</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will walk you through the basic usage of Allyanonimiser to detect and anonymize personally identifiable information (PII) in text.</p>"},{"location":"getting-started/quick-start/#creating-an-allyanonimiser-instance","title":"Creating an Allyanonimiser Instance","text":"<p>The first step is to create an instance of the Allyanonimiser class:</p> <pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create an instance with default settings\nally = create_allyanonimiser()\n</code></pre> <p>This instance comes pre-configured with all built-in patterns for Australian, general, and insurance-specific PII.</p>"},{"location":"getting-started/quick-start/#analyzing-text-for-pii","title":"Analyzing Text for PII","text":"<p>To detect PII entities in a text:</p> <pre><code># Text to analyze\ntext = \"Please reference your policy AU-12345678 for claims related to your vehicle registration XYZ123.\"\n\n# Analyze the text\nresults = ally.analyze(text)\n\n# Print the results\nfor result in results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n</code></pre> <p>Output: <pre><code>Entity: POLICY_NUMBER, Text: AU-12345678, Score: 0.85\nEntity: VEHICLE_REGISTRATION, Text: XYZ123, Score: 0.7\n</code></pre></p>"},{"location":"getting-started/quick-start/#anonymizing-text","title":"Anonymizing Text","text":"<p>To anonymize the detected PII:</p> <pre><code># Anonymize the text with specific operators for each entity type\nanonymized = ally.anonymize(\n    text=\"Please reference your policy AU-12345678 for claims related to your vehicle registration XYZ123.\",\n    operators={\n        \"POLICY_NUMBER\": \"mask\",      # Replace with asterisks\n        \"VEHICLE_REGISTRATION\": \"replace\"  # Replace with entity type\n    }\n)\n\n# Print the anonymized text\nprint(anonymized[\"text\"])\n</code></pre> <p>Output: <pre><code>Please reference your policy ********** for claims related to your vehicle registration &lt;VEHICLE_REGISTRATION&gt;.\n</code></pre></p>"},{"location":"getting-started/quick-start/#adding-custom-patterns","title":"Adding Custom Patterns","text":"<p>You can add your own patterns to detect additional entity types:</p> <pre><code># Add a custom pattern with regex\nally.add_pattern({\n    \"entity_type\": \"REFERENCE_CODE\",\n    \"patterns\": [r\"REF-\\d{6}-[A-Z]{2}\", r\"Reference\\s+#\\d{6}\"],\n    \"context\": [\"reference\", \"code\", \"ref\"],\n    \"name\": \"Reference Code\"\n})\n\n# Test the custom pattern\ntext = \"Your reference code is REF-123456-AB for this inquiry.\"\nresults = ally.analyze(text)\n\nfor result in results:\n    print(f\"Found {result.entity_type}: {result.text}\")\n</code></pre> <p>Output: <pre><code>Found REFERENCE_CODE: REF-123456-AB\n</code></pre></p>"},{"location":"getting-started/quick-start/#generating-patterns-from-examples","title":"Generating Patterns from Examples","text":"<p>Allyanonimiser can also generate patterns from example strings:</p> <pre><code># Generate a pattern from examples\nally.create_pattern_from_examples(\n    entity_type=\"EMPLOYEE_ID\",\n    examples=[\"EMP00123\", \"EMP45678\", \"EMP98765\"],\n    context=[\"employee\", \"staff\", \"id\"],\n    generalization_level=\"medium\"  # Options: none, low, medium, high\n)\n\n# Test the generated pattern\ntext = \"Employee EMP12345 submitted the request.\"\nresults = ally.analyze(text)\n\nfor result in results:\n    print(f\"Found {result.entity_type}: {result.text}\")\n</code></pre> <p>Output: <pre><code>Found EMPLOYEE_ID: EMP12345\n</code></pre></p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basics, explore the following topics to learn more:</p> <ul> <li>Analyzing Text - Learn about the analysis capabilities in depth</li> <li>Anonymizing Text - Explore the various anonymization operators</li> <li>Working with DataFrames - Process tabular data efficiently</li> <li>Pattern Reference - See all the built-in patterns</li> <li>Creating Custom Patterns - Learn how to create and manage custom patterns</li> </ul>"},{"location":"patterns/australian/","title":"Australian Patterns","text":"<p>Allyanonimiser includes specialized patterns for detecting Australian-specific PII and identifiers.</p>"},{"location":"patterns/australian/#australian-tax-file-number-au_tfn","title":"Australian Tax File Number (AU_TFN)","text":"<p>Tax File Numbers are unique identifiers issued by the Australian Taxation Office.</p> <p>Pattern Example: - <code>123 456 789</code> - <code>123456789</code> - <code>TFN: 123 456 789</code></p> <p>Regex Pattern: <pre><code>\\b\\d{3}\\s*\\d{3}\\s*\\d{3}\\b\n</code></pre></p> <p>Contexts: \"tax\", \"file\", \"number\", \"tfn\"</p>"},{"location":"patterns/australian/#australian-phone-number-au_phone","title":"Australian Phone Number (AU_PHONE)","text":"<p>Australian mobile and landline phone numbers.</p> <p>Pattern Example: - <code>0412 345 678</code> - <code>+61 412 345 678</code> - <code>(02) 9876 5432</code></p> <p>Regex Pattern: <pre><code>\\b(?:\\+?61|0)4\\d{2}\\s*\\d{3}\\s*\\d{3}\\b\n</code></pre></p> <p>Contexts: \"phone\", \"mobile\", \"call\", \"contact\"</p>"},{"location":"patterns/australian/#australian-medicare-number-au_medicare","title":"Australian Medicare Number (AU_MEDICARE)","text":"<p>Medicare numbers issued by Services Australia.</p> <p>Pattern Example: - <code>1234 56789 1</code> - <code>1234567891</code></p> <p>Regex Pattern: <pre><code>\\b\\d{4}\\s*\\d{5}\\s*\\d{1}\\b\n</code></pre></p> <p>Contexts: \"medicare\", \"card\", \"health\", \"insurance\"</p>"},{"location":"patterns/australian/#australian-drivers-license-au_drivers_license","title":"Australian Driver's License (AU_DRIVERS_LICENSE)","text":"<p>Driver's license numbers from various Australian states.</p> <p>Pattern Example: - <code>12345678</code> (NSW) - <code>1234AB</code> (NSW legacy)</p> <p>Regex Patterns: <pre><code>\\b\\d{8}\\b\n\\b\\d{4}[a-zA-Z]{2}\\b\n</code></pre></p> <p>Contexts: \"license\", \"licence\", \"driver\", \"driving\"</p>"},{"location":"patterns/australian/#australian-address-au_address","title":"Australian Address (AU_ADDRESS)","text":"<p>Australian address formats including street addresses and postal codes.</p> <p>Pattern Example: - <code>42 Main St, Sydney NSW 2000</code> - <code>Unit 5, 123 Example Road, Melbourne VIC 3000</code></p> <p>Regex Patterns: Multiple complex patterns for detecting address components.</p> <p>Contexts: \"street\", \"road\", \"avenue\", \"address\", \"suburb\"</p>"},{"location":"patterns/australian/#australian-postcode-au_postcode","title":"Australian Postcode (AU_POSTCODE)","text":"<p>Four-digit Australian postcodes.</p> <p>Pattern Example: - <code>2000</code> - <code>3000</code> - <code>NSW 2000</code></p> <p>Regex Pattern: <pre><code>\\b\\d{4}\\b\n</code></pre></p> <p>Contexts: \"postcode\", \"post\", \"code\", \"postal\"</p>"},{"location":"patterns/australian/#australian-bsb-and-account-number-au_bsb_account","title":"Australian BSB and Account Number (AU_BSB_ACCOUNT)","text":"<p>BSB (Bank-State-Branch) and account number combinations.</p> <p>Pattern Example: - <code>123-456 12345678</code> - <code>123456 12345678</code></p> <p>Regex Pattern: <pre><code>\\b\\d{3}-\\d{3}\\s*\\d{6,10}\\b\n</code></pre></p> <p>Contexts: \"bsb\", \"account\", \"banking\", \"bank\"</p>"},{"location":"patterns/australian/#australian-business-number-au_abn","title":"Australian Business Number (AU_ABN)","text":"<p>Australian Business Numbers issued by the Australian Business Register.</p> <p>Pattern Example: - <code>12 345 678 901</code> - <code>12345678901</code></p> <p>Regex Pattern: <pre><code>\\b\\d{2}\\s*\\d{3}\\s*\\d{3}\\s*\\d{3}\\b\n</code></pre></p> <p>Contexts: \"abn\", \"business\", \"number\", \"australian\"</p>"},{"location":"patterns/australian/#australian-passport-number-au_passport","title":"Australian Passport Number (AU_PASSPORT)","text":"<p>Australian passport numbers.</p> <p>Pattern Example: - <code>N1234567</code> - <code>PA1234567</code></p> <p>Regex Pattern: <pre><code>\\b[A-Za-z]\\d{8}\\b\n</code></pre></p> <p>Contexts: \"passport\", \"travel\", \"document\", \"international\"</p>"},{"location":"patterns/australian/#usage-example","title":"Usage Example","text":"<pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create the analyzer\nally = create_allyanonimiser()\n\n# Example text with Australian PII\ntext = \"\"\"\nThe customer John Smith with TFN 123 456 789 and Medicare 1234 56789 1 \ncalled from 0412 345 678 regarding their policy. They live at \n42 Main St, Sydney NSW 2000 and their ABN is 12 345 678 901.\n\"\"\"\n\n# Analyze the text\nresults = ally.analyze(text)\n\n# Filter for Australian patterns only\nau_results = [r for r in results if r.entity_type.startswith(\"AU_\")]\n\n# Print the results\nfor result in au_results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n</code></pre>"},{"location":"patterns/custom/","title":"Creating Custom Patterns","text":"<p>Coming soon...</p>"},{"location":"patterns/general/","title":"General Patterns","text":"<p>Coming soon...</p>"},{"location":"patterns/insurance/","title":"Insurance Patterns","text":"<p>Coming soon...</p>"},{"location":"patterns/overview/","title":"Pattern Reference Overview","text":"<p>Allyanonimiser provides a comprehensive set of built-in patterns for detecting PII and sensitive information, organized into categories based on their origin and purpose.</p>"},{"location":"patterns/overview/#pattern-categories","title":"Pattern Categories","text":"<p>The patterns in Allyanonimiser are organized into three main categories:</p> <ol> <li>Australian Patterns - Patterns specific to Australian identifiers and formats</li> <li>General Patterns - Universal PII patterns that apply across regions</li> <li>Insurance Patterns - Patterns specific to the insurance industry</li> </ol>"},{"location":"patterns/overview/#pattern-structure","title":"Pattern Structure","text":"<p>Each pattern in Allyanonimiser consists of:</p> <ul> <li>Entity Type: A unique identifier for the pattern (e.g., <code>AU_TFN</code>, <code>PERSON</code>, <code>INSURANCE_POLICY_NUMBER</code>)</li> <li>Patterns: One or more regex patterns or spaCy patterns that match the entity</li> <li>Context: Words or phrases that often appear near the entity (improves detection accuracy)</li> <li>Score: Confidence score threshold for detection</li> <li>Name: Human-readable name for the entity type</li> <li>Language: Language code (usually \"en\" for English)</li> </ul>"},{"location":"patterns/overview/#pattern-definition-example","title":"Pattern Definition Example","text":"<p>Here's an example of how a pattern is defined:</p> <pre><code>{\n    \"entity_type\": \"AU_TFN\",\n    \"patterns\": [\n        r\"\\b\\d{3}\\s*\\d{3}\\s*\\d{3}\\b\",\n        r\"\\bTFN:?\\s*\\d{3}\\s*\\d{3}\\s*\\d{3}\\b\"\n    ],\n    \"context\": [\"tax\", \"file\", \"number\", \"tfn\"],\n    \"name\": \"Australian Tax File Number\",\n    \"score\": 0.65,\n    \"language\": \"en\"\n}\n</code></pre>"},{"location":"patterns/overview/#accessing-built-in-patterns","title":"Accessing Built-in Patterns","text":"<p>You can access the built-in patterns programmatically:</p> <pre><code>from allyanonimiser.patterns.au_patterns import get_au_pattern_definitions\nfrom allyanonimiser.patterns.general_patterns import get_general_pattern_definitions\nfrom allyanonimiser.patterns.insurance_patterns import get_insurance_pattern_definitions\n\n# Get Australian patterns\nau_patterns = get_au_pattern_definitions()\n\n# Get general patterns\ngeneral_patterns = get_general_pattern_definitions()\n\n# Get insurance patterns\ninsurance_patterns = get_insurance_pattern_definitions()\n\n# Print all pattern entity types\nfor pattern in au_patterns:\n    print(f\"AU Pattern: {pattern['entity_type']}\")\n</code></pre>"},{"location":"patterns/overview/#pattern-categories_1","title":"Pattern Categories","text":"<p>In the following sections, we provide detailed information about each pattern category:</p> <ul> <li>Australian Patterns: Patterns for Australian-specific identifiers</li> <li>General Patterns: Universal PII patterns</li> <li>Insurance Patterns: Insurance industry-specific patterns</li> </ul>"},{"location":"patterns/overview/#custom-patterns","title":"Custom Patterns","text":"<p>Learn how to create and manage your own custom patterns:</p> <ul> <li>Creating Custom Patterns: Guide to creating and registering custom patterns</li> </ul>"},{"location":"usage/analyzing-text/","title":"Analyzing Text for PII","text":"<p>This guide explains how to use Allyanonimiser to detect personally identifiable information (PII) in text.</p>"},{"location":"usage/analyzing-text/#basic-analysis","title":"Basic Analysis","text":"<p>To analyze text for PII, use the <code>analyze</code> method:</p> <pre><code>from allyanonimiser import create_allyanonimiser\n\n# Create the analyzer\nally = create_allyanonimiser()\n\n# Text to analyze\ntext = \"\"\"Customer John Smith (TFN: 123 456 789) reported an incident on 15/06/2023\nregarding their policy AU-12345678. They can be reached at 0412 345 678 or\njohn.smith@example.com. They live at 42 Main St, Sydney NSW 2000.\"\"\"\n\n# Analyze the text\nresults = ally.analyze(text)\n\n# Print the results\nfor result in results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n</code></pre> <p>Example output:</p> <pre><code>Entity: PERSON, Text: John Smith, Score: 0.85\nEntity: AU_TFN, Text: 123 456 789, Score: 0.75\nEntity: DATE, Text: 15/06/2023, Score: 0.8\nEntity: POLICY_NUMBER, Text: AU-12345678, Score: 0.9\nEntity: AU_PHONE, Text: 0412 345 678, Score: 0.85\nEntity: EMAIL_ADDRESS, Text: john.smith@example.com, Score: 0.95\nEntity: AU_ADDRESS, Text: 42 Main St, Sydney NSW 2000, Score: 0.7\n</code></pre>"},{"location":"usage/analyzing-text/#filtering-by-entity-type","title":"Filtering by Entity Type","text":"<p>You can filter results to focus on specific entity types:</p> <pre><code># Filter results by entity type\ncontact_info = [r for r in results if r.entity_type in [\"EMAIL_ADDRESS\", \"AU_PHONE\"]]\n\nfor info in contact_info:\n    print(f\"Contact info found: {info.text} ({info.entity_type})\")\n</code></pre>"},{"location":"usage/analyzing-text/#configuring-the-analysis","title":"Configuring the Analysis","text":"<p>For more control over the analysis process, use the <code>AnalysisConfig</code> class:</p> <pre><code>from allyanonimiser import create_allyanonimiser, AnalysisConfig\n\n# Create the analyzer\nally = create_allyanonimiser()\n\n# Configure analysis to only detect specific entity types with higher confidence\nconfig = AnalysisConfig(\n    active_entity_types=[\"PERSON\", \"EMAIL_ADDRESS\", \"AU_PHONE\"],\n    min_score_threshold=0.7\n)\n\n# Analyze with the configuration\nresults = ally.analyze(\n    text=\"John Smith can be reached at john.smith@example.com or 0412 345 678.\",\n    config=config\n)\n\nfor result in results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n</code></pre>"},{"location":"usage/analyzing-text/#adding-context-words","title":"Adding Context Words","text":"<p>You can improve detection accuracy by providing additional context words for specific entity types:</p> <pre><code>from allyanonimiser import create_allyanonimiser, AnalysisConfig\n\n# Create the analyzer\nally = create_allyanonimiser()\n\n# Add context words to help with detection\nconfig = AnalysisConfig(\n    context_words={\n        \"INSURANCE_POLICY_NUMBER\": [\"reference\", \"contract\", \"insurance\"],\n        \"PERSON\": [\"customer\", \"client\", \"representative\"]\n    }\n)\n\n# Analyze with additional context\nresults = ally.analyze(\n    text=\"The client Jane Doe referenced contract A-987654.\",\n    config=config\n)\n\nfor result in results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}, Score: {result.score}\")\n</code></pre>"},{"location":"usage/analyzing-text/#working-with-detection-results","title":"Working with Detection Results","text":"<p>The analysis results are returned as objects with useful attributes:</p> <pre><code>from allyanonimiser import create_allyanonimiser\n\nally = create_allyanonimiser()\nresults = ally.analyze(\"John Smith's TFN is 123 456 789.\")\n\n# Each result object contains detailed information\nfor result in results:\n    print(f\"Entity type: {result.entity_type}\")\n    print(f\"Text: {result.text}\")\n    print(f\"Start position: {result.start}\")\n    print(f\"End position: {result.end}\")\n    print(f\"Confidence score: {result.score}\")\n    print(f\"Pattern source: {result.pattern_name}\")\n    print(\"---\")\n</code></pre>"},{"location":"usage/analyzing-text/#handling-overlapping-entities","title":"Handling Overlapping Entities","text":"<p>Sometimes entities can overlap in the text. You can control how overlapping entities are handled:</p> <pre><code>from allyanonimiser import create_allyanonimiser, AnalysisConfig\n\nally = create_allyanonimiser()\n\n# Configure analysis to prefer longer entities when overlapping\nconfig = AnalysisConfig(\n    resolve_overlaps=\"longest\",  # Options: \"longest\", \"highest_score\", \"all\"\n)\n\n# Text with potentially overlapping entities\ntext = \"Reference number POL-123456-AU was submitted by the customer.\"\n\nresults = ally.analyze(text, config=config)\n</code></pre>"},{"location":"usage/analyzing-text/#analyzing-specific-document-types","title":"Analyzing Specific Document Types","text":"<p>Allyanonimiser has specialized analyzers for specific document types:</p> <pre><code>from allyanonimiser import create_allyanonimiser\n\nally = create_allyanonimiser()\n\n# Analyze a claim note (optimized for insurance claim notes)\nclaim_note = \"\"\"\nClaim Note: Customer John Smith reported a vehicle accident on 15/06/2023.\nDamage to front bumper and headlight. Policy AU-12345678, Claim Reference CL-87654.\n\"\"\"\n\nclaim_results = ally.analyze_claim_note(claim_note)\n\nfor result in claim_results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}\")\n\n# Analyze an insurance email\nemail = \"\"\"\nFrom: customer@example.com\nTo: claims@insurance.com\nSubject: Claim Update - Policy AU-12345678\n\nMy name is Jane Doe and I'm writing about my recent claim CL-87654.\n\"\"\"\n\nemail_results = ally.analyze_insurance_email(email)\n\nfor result in email_results:\n    print(f\"Entity: {result.entity_type}, Text: {result.text}\")\n</code></pre>"},{"location":"usage/analyzing-text/#batch-processing-multiple-texts","title":"Batch Processing Multiple Texts","text":"<p>For efficiency when processing multiple texts:</p> <pre><code>from allyanonimiser import create_allyanonimiser\n\nally = create_allyanonimiser()\n\n# Multiple texts to analyze\ntexts = [\n    \"John Smith called about claim CL-12345.\",\n    \"Jane Doe emailed about policy AU-67890.\",\n    \"Alex Johnson reported an incident at 42 Main St, Sydney.\"\n]\n\n# Process all texts\nall_results = []\nfor text in texts:\n    results = ally.analyze(text)\n    all_results.append(results)\n\n# Count entities by type\nentity_counts = {}\nfor results in all_results:\n    for result in results:\n        entity_type = result.entity_type\n        entity_counts[entity_type] = entity_counts.get(entity_type, 0) + 1\n\nprint(\"Entity type counts:\")\nfor entity_type, count in entity_counts.items():\n    print(f\"{entity_type}: {count}\")\n</code></pre>"},{"location":"usage/analyzing-text/#performance-considerations","title":"Performance Considerations","text":"<p>For optimal performance when analyzing large amounts of text:</p> <ul> <li>Use <code>batch_size</code> parameter for large texts</li> <li>Consider creating a more focused configuration with only necessary entity types</li> <li>Use the appropriate spaCy model (en_core_web_sm for speed, en_core_web_lg for accuracy)</li> </ul> <pre><code>from allyanonimiser import create_allyanonimiser, AnalysisConfig\n\n# Create focused configuration\nconfig = AnalysisConfig(\n    active_entity_types=[\"PERSON\", \"EMAIL_ADDRESS\", \"PHONE_NUMBER\"],\n    min_score_threshold=0.7\n)\n\n# Create analyzer\nally = create_allyanonimiser()\n\n# Analyze with chunking for efficiency\nresults = ally.analyze(\n    text=very_long_text,\n    config=config,\n    batch_size=4096  # Process in 4KB chunks\n)\n</code></pre>"},{"location":"usage/analyzing-text/#next-steps","title":"Next Steps","text":"<ul> <li>Anonymizing Text - Learn how to anonymize the detected entities</li> <li>Working with DataFrames - Process tabular data efficiently</li> <li>Pattern Reference - Explore all the built-in patterns</li> </ul>"},{"location":"usage/anonymizing-text/","title":"Anonymizing Text","text":"<p>Coming soon...</p>"},{"location":"usage/basic-usage/","title":"Basic Usage","text":"<p>Coming soon...</p>"},{"location":"usage/dataframes/","title":"Working with DataFrames","text":"<p>Coming soon...</p>"}]}